#!/bin/bash
# this script automatically manages LVM volumes for openvz
#
# openQRM Enterprise developed by openQRM Enterprise GmbH.
#
# All source code and content (c) Copyright 2012, openQRM Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the GNU General Public License version 2, unless otherwise agreed with openQRM Enterprise GmbH.
# The latest version of this license can be found here: src/doc/LICENSE.txt
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://openqrm-enterprise.com
#
# Copyright 2012, openQRM Enterprise GmbH <info@openqrm-enterprise.com>
#
OPENQRM_SERVER_BASE_DIR=$(dirname $0)/../../../..
OPENQRM_SERVER_BASE_DIR=$(pushd $OPENQRM_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/openvz-storage/include/openqrm-plugin-openvz-storage-functions
. $OPENQRM_SERVER_BASE_DIR/openqrm/plugins/openvz-storage/etc/openqrm-plugin-openvz-storage.conf
OPENQRM_POSTENCODE="$OPENQRM_SERVER_BASE_DIR/openqrm/sbin/openqrm-postencode"
if [ -f $OPENQRM_RESOURCE_PARAMETER_FILE ]; then
	. $OPENQRM_RESOURCE_PARAMETER_FILE
	OPENQRM_SERVER_IP=$resource_openqrmserver
	OPENQRM_EXEC_PORT=$resource_execdport
elif [ -f $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf ]; then
	. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
	. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
	openqrm_server_get_config
	OPENQRM_SERVER_IP=$OPENQRM_SERVER_IP_ADDRESS
	resource_id=0
	resource_openqrmserver=$OPENQRM_SERVER_IP_ADDRESS
	openqrm_web_protocol=$OPENQRM_WEB_PROTOCOL
fi
export LANG=C
LINEBR='
'
# define wget to use with https
if [ "$openqrm_web_protocol" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate"
fi
# dir for progress stats
SYNC_PROGRESS_DIR="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/openvz-storage/lock"
if [ ! -d "$SYNC_PROGRESS_DIR" ]; then
	mkdir -p $SYNC_PROGRESS_DIR
fi
# defines the filesystem to use for the openvz storage volumes
OPENVZ_STORAGE_DEFAULT_FILESYSTEM=ext3
export OPENVZ_STORAGE_DEFAULT_FILESYSTEM
# how long to wait for the volume authentication, each loop is 5 secs
MAX_VOLUME_AUTHENTICATION_LOOP=60
export MAX_VOLUME_AUTHENTICATION_LOOP

# the template dir on the storage server
OPENVZ_TEMPLATE_DIR="/vz/template/cache"
OPENVZ_TEMPLATE_TEMP_DIR="/tmp"

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi
if ! which screen 1>/dev/null; then
	echo "ERROR: The 'screen' utility is not installed! Please install and try again."
	openvz_log "ERROR: The 'screen' utility is not installed! Please install and try again."
	exit 6
fi

# re-run in background via screen
if [ "$RUN_IN_BACKGROUND" != "true" ]; then
	if [ -x /usr/bin/screen.real ]; then
		RUNSCREEN="/usr/bin/screen.real"
	else
		RUNSCREEN=`which screen`
	fi
	export RUN_IN_BACKGROUND=true
	SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
	$RUNSCREEN -dmS $SCREEN_NAME $0 $@
	exit
fi

function openvz_storage_usage() {
	echo "Usage : $0 add/remove/snap/list/resize/clone <-n image-name> <-v volume-group>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "        $0 auth <-r image-rootdevice> <-i authidentifier>"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	echo "        $0 post_identifier <-u username> <-p password>"
	echo "        $0 post_sync_progress <-n image-name> <-s image-snapshot-name> <-v volume-group> <-u username> <-p password>"
	echo "        $0 post_sync_finished <-n image-name> <-v volume-group> <-u username> <-p password>"

	echo "        $0 get_openvz_templates"
	echo "        $0 remove_openvz_template <-t template-name>"
	echo "        $0 deploy_openvz_template <-t template-name> <-n image-name> <-v volume-group>"
	echo "        $0 download_openvz_template <-d template-url>"
	exit 1
}

function openvz_storage_resize_fs() {
	local LVM_VOLUME=$1
	local VOLUME_SIZE=$2
	LVM_VOLUME_NAME=`basename $LVM_VOLUME`
	openqrm_post_event 0 "$LVM_VOLUME" 9 "openqrm-openvz-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
	# create lock for autblocker
	touch $SYNC_PROGRESS_DIR/$LVM_VOLUME_NAME
	e2fsck -y $LVM_VOLUME
	if resize2fs -f -p $LVM_VOLUME $VOLUME_SIZE""M; then
		openqrm_post_event 0 "$LVM_VOLUME" 10 "openqrm-openvz-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
		openqrm_post_event 0 "snap" 5 "openqrm-openvz-storage" "Successfully resized volume $LVM_VOLUME to $VOLUME_SIZE MB."
	else
		openqrm_post_event 0 "$LVM_VOLUME" 10 "openqrm-openvz-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
		if ! e2fsck -fy $LVM_VOLUME; then
			openqrm_post_event 0 "snap" 2 "openqrm-openvz-storage" "Errors during resizing volume $LVM_VOLUME."
		fi
	fi
	rm -f $SYNC_PROGRESS_DIR/$LVM_VOLUME_NAME
}


FULL_COMMANDLINE="$0 $@"
LVM_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			LVM_IMAGE_NAME=$2
			shift
			;;
		-m)
			LVM_IMAGE_SIZE=$2
			shift
			;;
		-s)
			LVM_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-i)
			LVM_IMAGE_AUTH=$2
			shift
			;;
		-r)
			LVM_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-u)
			LVM_OPENQRM_USERNAME=$2
			shift
			;;
		-p)
			LVM_OPENQRM_PASSWORD=$2
			shift
			;;
		-v)
			LVM_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		-t)
			OPENVZ_TEMPLATE_NAME=$2
			shift
			;;
		-d)
			OPENVZ_TEMPLATE_URL=$2
			shift
			;;
		*)
			echo "ERROR: Free commandline arguments are not allowed"
			openvz_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$LVM_COMMAND" == "" ]; then
	openvz_storage_usage
fi

if [ "$LVM_COMMAND" == "post_lv" ] || [ "$LVM_COMMAND" == "post_vg" ] || [ "$LVM_COMMAND" == "post_identifier" ]; then
		if [ "$LVM_OPENQRM_USERNAME" == "" ]; then
			openvz_storage_usage
		fi
		if [ "$LVM_OPENQRM_PASSWORD" == "" ]; then
			openvz_storage_usage
		fi
		if [ "$LVM_COMMAND" == "post_lv" ]; then
			if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				openvz_storage_usage
			fi
		fi

else

	if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "auth" ] && [ "$LVM_COMMAND" != "get_openvz_templates" ] && [ "$LVM_COMMAND" != "remove_openvz_template" ] && [ "$LVM_COMMAND" != "download_openvz_template" ]; then
		if [ "$LVM_IMAGE_NAME" == "" ]; then
			openvz_storage_usage
		fi
		if [ "$LVM_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			openvz_storage_usage
		fi
	fi
fi
# load required lvm modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null 2>&1
	modprobe dm-snapshot 1>/dev/null 2>&1
fi

if [ "$LVM_COMMAND" != "list" ] && [ "$LVM_COMMAND" != "post_vg" ] && [ "$LVM_COMMAND" != "post_identifier" ] && [ "$LVM_COMMAND" != "auth" ] && [ "$LVM_COMMAND" != "get_openvz_templates" ] && [ "$LVM_COMMAND" != "remove_openvz_template" ] && [ "$LVM_COMMAND" != "download_openvz_template" ]; then
	# check if volume group exists
	if ! vgs --unbuffered $LVM_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null 2>&1; then
		openqrm_post_event 0 "check" 2 "openqrm-openvz-storage" "Could not find volume group $LVM_STORAGE_SERVER_VOLUME_GROUP on the storage-server!"
		echo "ERROR: Could not find volume-group $LVM_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		exit 1
	fi
fi

case "$LVM_COMMAND" in 

	add)
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			# echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE
		openvz_lock aquire
		if ! lvcreate -L$LVM_IMAGE_SIZE -n$LVM_IMAGE_NAME $LVM_STORAGE_SERVER_VOLUME_GROUP; then
			openqrm_post_event 0 "add" 2 "openqrm-openvz-storage" "Could not create /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
			openvz_lock release
			exit 1
		fi
		#echo "NOTICE: creating $OPENVZ_STORAGE_DEFAULT_FILESYSTEM filesytem on /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
		if ! mkfs.$OPENVZ_STORAGE_DEFAULT_FILESYSTEM -F /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME; then
			openqrm_post_event 0 "add" 2 "openqrm-openvz-storage" "Could not create $OPENVZ_STORAGE_DEFAULT_FILESYSTEM filesytem on /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
			openvz_lock release
			exit 1
		fi
		# deactivate vol, assignment will activate it on demand
		#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		openvz_lock release
		openqrm_post_event 0 "add" 5 "openqrm-openvz-storage" "Created logical volume $LVM_IMAGE_NAME size $LVM_IMAGE_SIZE MB on vg $LVM_STORAGE_SERVER_VOLUME_GROUP"
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;

	remove)
		# check that no snapshots existing with this volume as the origin
		if lvs | awk '{ print $5 }' | grep -w $LVM_IMAGE_NAME 1>/dev/null; then
			openqrm_post_event 0 "remove" 3 "openqrm-openvz-storage" "Snapshot exist from volume /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME. Not removing!"
			exit 1
		fi
		openvz_lock aquire
		lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvremove -f /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		openvz_lock release
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi
		openqrm_post_event 0 "remove" 5 "openqrm-openvz-storage" "Removed logical volume $LVM_IMAGE_NAME from vg $LVM_STORAGE_SERVER_VOLUME_GROUP"

		;;

	snap)
		if [ "$LVM_IMAGE_SNAPSHOT_NAME" == "" ]; then
			#echo "ERROR: Please give a name for the snapshot using the -s cmdline parmeter"
			openvz_storage_usage
		fi
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			#echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE

		# check that source fs-images exist
		if ! `lvdisplay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 1>/dev/null`; then
			openqrm_post_event 0 "snap" 2 "openqrm-openvz-storage" "Could not find /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME on the storage-server"
			exit 1
		fi
		openvz_lock aquire
		lvchange -ay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvcreate --size $LVM_IMAGE_SIZE""m --snapshot --name $LVM_IMAGE_SNAPSHOT_NAME /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_SNAPSHOT_NAME
		#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		openvz_lock release
		if [ "$OPENQRM_PLUGIN_OPENVZ_STORAGE_RESIZE_SNAPSHOTS_FILESYSTEM" == "true" ]; then
			# find the rootfs and resize it
			openvz_storage_resize_fs /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_SNAPSHOT_NAME $LVM_IMAGE_SIZE
		fi
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi
		openqrm_post_event 0 "snap" 5 "openqrm-openvz-storage" "Created snapshot from logical volume $LVM_IMAGE_NAME -> $LVM_IMAGE_SNAPSHOT_NAME"
		;;

	auth)
		openvz_log auth "Authenticating image $LVM_IMAGE_ROOTDEVICE to $LVM_IMAGE_AUTH"
		# this is just for starting auth, make sure the device is there, otherwise wait
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ] && [ "$LVM_IMAGE_NAME" != "" ]; then
			MAX_AUTH_LOOP=0
			while (true); do
				lvchange -ay $LVM_IMAGE_ROOTDEVICE
				if [ -e "$LVM_IMAGE_ROOTDEVICE" ]; then
					# fs resize active ?
					if [ ! -f "$SYNC_PROGRESS_DIR/$LVM_IMAGE_NAME" ]; then
						break
					fi
				fi
				#lvchange -an $LVM_IMAGE_ROOTDEVICE
				sleep 5
				if [ "$MAX_AUTH_LOOP" == "$MAX_VOLUME_AUTHENTICATION_LOOP" ]; then
					openvz_log auth "ERROR: Volume image $LVM_IMAGE_ROOTDEVICE does not exists, Cannot auth to $LVM_IMAGE_AUTH"
					exit 1
				fi
				MAX_AUTH_LOOP=$(( MAX_AUTH_LOOP + 1 ))
			done
			# if we have an image name send back to openQRM that storage auth finished to remvoe the storage-auth-blocker
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD "$openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=auth_finished&openvz_storage_image_name=$LVM_IMAGE_NAME"; then
				openqrm_post_event 0 "auth" 2 "openqrm-openvz-storage" "Could not remove auth-blocker for volume $LVM_IMAGE_NAME!"
			fi
		fi
		;;

	list)
		lvm lvs
		;;
	post_vg)
		# echo "Posting current volume group status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgs --units m | grep -v VFree | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=get_storage; then
			openqrm_post_event 0 "post_vg" 2 "openqrm-openvz-storage" "Could not post the volume group status to the openQRM-server at $resource_openqrmserver!"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;
	post_lv)
		#echo "Posting current logic volume status to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.$LVM_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		> $STORAGE_STATUS_TMP
		lvs $LVM_STORAGE_SERVER_VOLUME_GROUP --noheadings --units m -o lv_name,vg_name,lv_attr,lv_size,origin | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP.tmp
		for LVOL in `cat $STORAGE_STATUS_TMP.tmp | awk {' print $1 '}`; do
			# check for clone-in-progress
			if [ -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVOL.clone_in_progress" ]; then
				echo "openvz-lvm-deployment@$LVOL@$LVM_STORAGE_SERVER_VOLUME_GROUP@-@clone_in_progress@@@" >> $STORAGE_STATUS_TMP
			else
				echo -n "openvz-lvm-deployment " >> $STORAGE_STATUS_TMP
				grep -w ^$LVOL $STORAGE_STATUS_TMP.tmp >> $STORAGE_STATUS_TMP
			fi
		done
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=get_storage; then
			openqrm_post_event 0 "post_lv" 2 "openqrm-openvz-storage" "Could not post the logic volume status to the openQRM-server at $resource_openqrmserver!"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post $STORAGE_STATUS_TMP.tmp
		;;
	post_identifier)
		#echo "Posting current logical volume identifier to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.lv.openvz-deployment.ident
		> $STORAGE_STATUS_TMP

		for LVOL in `lvdisplay | grep "LV Name" | awk {' print $3 '}`; do
			LVOL_SHORT=`basename $LVOL`
			IMAGE_NAME=$LVOL_SHORT
			VOLUME_GROUP=`echo $LVOL | cut -d'/' -f3`
			echo "$IMAGE_NAME:/dev/$VOLUME_GROUP/$IMAGE_NAME"
			echo "$IMAGE_NAME:/dev/$VOLUME_GROUP/$IMAGE_NAME" >> $STORAGE_STATUS_TMP

		done

		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=get_ident; then
			openqrm_post_event 0 "post_identifier" 2 "openqrm-openvz-storage" "Could not post the logic volume identifier to the openQRM-server at $resource_openqrmserver!"
			openvz_log post_identifier "ERROR: Could not post the logic volume identifier to the openQRM-server at $resource_openqrmserver!"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;


	resize)
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE
		openqrm_post_event 0 "resize" 5 "openqrm-openvz-storage" "Resizing logical volume $LVM_IMAGE_NAME + size $LVM_IMAGE_SIZE MB!"
		openvz_lock aquire
		lvchange -ay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		lvresize -L +$LVM_IMAGE_SIZE /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME 2>&1 | logger
		#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		openvz_lock release
		if [ "$OPENQRM_PLUGIN_OPENVZ_STORAGE_RESIZE_SNAPSHOTS_FILESYSTEM" == "true" ]; then
			# find the rootfs and resize it
			openvz_storage_resize_fs /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME $LVM_IMAGE_SIZE
		fi
		# in case we have a username + password post the updated list to the openQRM-server
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;


	clone)
		# cloning is similar to snapshots but since lvm cannot (yet) create snapshots
		# from snapshots we have to dd the origin (which may be a snapshot) to a
		# new lvol.
		if [ "$LVM_IMAGE_SNAPSHOT_NAME" == "" ]; then
			#echo "ERROR: Please give a name for the clone using the -s cmdline parmeter"
			openvz_storage_usage
		fi
		if [ "$LVM_IMAGE_SIZE" == "" ]; then
			LVM_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			#echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export LVM_IMAGE_SIZE

		# check that source fs-images exist
		if [ ! -e /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME ]; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Source volume /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME does not exist."
			exit 1
		fi
		if [ -e /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_SNAPSHOT_NAME ]; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Volume $LVM_IMAGE_SNAPSHOT_NAME already exists"
			exit 1
		fi
		echo "Cloning logical volume $LVM_IMAGE_NAME to $LVM_IMAGE_SNAPSHOT_NAME size $LVM_IMAGE_SIZE MB volume group $LVM_STORAGE_SERVER_VOLUME_GROUP"
		ORIGIN_SIZE=""
		ORIGIN_VOLUME="/dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME"
		# if source volume is a snapshot find out the size of the origin
		VOLUME_IS_SNAPSHOT=`lvs --noheadings -o origin $ORIGIN_VOLUME | awk '{ print $1 }'`
		if [ "$VOLUME_IS_SNAPSHOT" != "" ]; then
			ORIGIN_VOLUME="/dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$VOLUME_IS_SNAPSHOT"
		fi
		ORIGIN_SIZE=`lvs --noheadings -o lv_size --units m --nosuffix $ORIGIN_VOLUME | awk '{ print $1 }' | cut -d'.' -f1`
		if [ "$ORIGIN_SIZE" != "" ]; then
			LVM_IMAGE_SIZE=$ORIGIN_SIZE
		fi
		# capture the original image name early, we later will shift it for the add/remove functions
		LVM_ORIGINAL_IMAGE_NAME=$LVM_IMAGE_NAME
		# create mountpoints for origin and clone
		MOUNTPOINT_ORIGIN=`mktemp -d /tmp/$LVM_IMAGE_NAME.origin.XXXXXXXXXX` || exit 1
		MOUNTPOINT_CLONE=`mktemp -d /tmp/$LVM_IMAGE_SNAPSHOT_NAME.clone.XXXXXXXXXX` || exit 1

		# create new volume
		openvz_lock aquire
		### set size
		if ! lvcreate -L$LVM_IMAGE_SIZE"M" -n$LVM_IMAGE_SNAPSHOT_NAME $LVM_STORAGE_SERVER_VOLUME_GROUP; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Could not create the new clone volume"
			openvz_lock release
			exit 1
		fi
		# create fs
		if ! mkfs.ext3 -F /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Could not create the filesystem on /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME"
			openvz_lock release
			exit 1
		fi
		# mount clone
		if ! mount /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME $MOUNTPOINT_CLONE; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Could not mount clone /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME"
			openvz_lock release
			exit 1
		fi
		# mount origin
		if ! mount /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME $MOUNTPOINT_ORIGIN; then
			openqrm_post_event 0 "clone" 3 "openvz-storage" "Could not mount origin /dev/mapper/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME"
			openvz_lock release
			exit 1
		fi

		# create locks for origin + snapshot
		touch "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME.sync_in_progress.$LVM_IMAGE_SNAPSHOT_NAME"
		touch "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME.clone_in_progress"

		# create long-term-action start event
		openqrm_post_event 0 "$LVM_IMAGE_SNAPSHOT_NAME" 9 "openvz-storage" "Started to clone $LVM_IMAGE_SNAPSHOT_NAME from $LVM_IMAGE_NAME"
		# get a list of files to sync
		rsync -a -vv --list-only --progress $MOUNTPOINT_ORIGIN/* $MOUNTPOINT_CLONE/ > $SYNC_PROGRESS_DIR/rsync_files.$LVM_IMAGE_SNAPSHOT_NAME.log
		> $SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_SNAPSHOT_NAME.log
		# post exports early, we show the progress in the ui
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			$0 post_sync_progress -n $LVM_IMAGE_SNAPSHOT_NAME -v $LVM_STORAGE_SERVER_VOLUME_GROUP -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD &
		fi

		# rsync origin to clone, let other lvm commands run in this time
		openvz_lock release
		# delay start syncing
		sleep 10
		if ! rsync -a --progress $MOUNTPOINT_ORIGIN/* $MOUNTPOINT_CLONE/ > $SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_SNAPSHOT_NAME.log; then
			openqrm_post_event 0 "clone" 2 "openvz-storage" "Could not copy target logical volume $LVM_IMAGE_NAME!"
			rm -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME.sync_in_progress.$LVM_IMAGE_SNAPSHOT_NAME"
			rm -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME.clone_in_progress"
			openqrm_post_event 0 "$LVM_IMAGE_SNAPSHOT_NAME" 10 "openvz-storage" "Finished to clone $LVM_IMAGE_SNAPSHOT_NAME"
			exit 1
		fi
		# remove lock from the origin + snapshot
		rm -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME.sync_in_progress.$LVM_IMAGE_SNAPSHOT_NAME"
		rm -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_SNAPSHOT_NAME.clone_in_progress"
		# umount origin + clone
		umount $MOUNTPOINT_ORIGIN
		umount $MOUNTPOINT_CLONE
		rmdir $MOUNTPOINT_ORIGIN $MOUNTPOINT_CLONE
		# stop sync-progress monitor and send sync-finished to openQRM
		rm -f $SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_SNAPSHOT_NAME.log $SYNC_PROGRESS_DIR/rsync_files.$LVM_IMAGE_SNAPSHOT_NAME.log
		$0 post_sync_finished -n $LVM_IMAGE_SNAPSHOT_NAME -v $LVM_STORAGE_SERVER_VOLUME_GROUP -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD
		# create long-term-action finished event
		openqrm_post_event 0 "$LVM_IMAGE_SNAPSHOT_NAME" 10 "openvz-storage" "Started to clone $LVM_IMAGE_SNAPSHOT_NAME from $LVM_IMAGE_NAME"

		# here we notify openQRM that cloning has finished
		# in case we have a username + password post the updated list to the openQRM-server
		# and notify openQRM that cloning has finished
		if [ "$LVM_OPENQRM_USERNAME" != "" ] && [ "$LVM_OPENQRM_PASSWORD" != "" ]; then
			CLONE_FINISHED="$LVM_IMAGE_SNAPSHOT_NAME.clone"
			touch $CLONE_FINISHED
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $CLONE_FINISHED` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=clone_finished; then
				openqrm_post_event 0 "clone" 2 "openqrm-openvz-storage" "Could not post clone-finished status to the openQRM-server at $resource_openqrmserver!"
			fi
			# post lv
			$0 post_lv -u $LVM_OPENQRM_USERNAME -p $LVM_OPENQRM_PASSWORD -v $LVM_STORAGE_SERVER_VOLUME_GROUP
		fi

		;;



	post_sync_progress)
		echo "Posting progress of the sync action for volume $LVM_IMAGE_NAME to the openQRM-server"
		if [ ! -f "$SYNC_PROGRESS_DIR/rsync_files.$LVM_IMAGE_NAME.log" ] || [ ! -f "$SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_NAME.log" ]; then
			exit 0
		fi
		STORAGE_STATUS_TMP=$resource_id.lvm.$LVM_IMAGE_NAME.sync_progress
		while (true); do
			# if this is a snapshot volume we have to wait until the sync is ready
			if [ -e "/dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME" ] && [ ! -f "$SYNC_PROGRESS_DIR/$LVM_STORAGE_SERVER_VOLUME_GROUP-$LVM_IMAGE_NAME.clone_in_progress" ]; then
				# sync is ready
				break
			else
				if [ ! -f "$SYNC_PROGRESS_DIR/rsync_files.$LVM_IMAGE_NAME.log" ] || [ ! -f "$SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_NAME.log" ]; then
				    # cloning not started yet, waiting for the snapshot to appear
				    echo "0" > $STORAGE_STATUS_TMP
				else
				    # get the size of all changes
				    COMPLETE_CHANGE_SIZE=`cat $SYNC_PROGRESS_DIR/rsync_files.$LVM_IMAGE_NAME.log | wc -l`
				    # double up to get around 100 percent
				    COMPLETE_CHANGE_SIZE=$(( COMPLETE_CHANGE_SIZE * 2 ))
				    PARTITIAL_CHANGE_SIZE=`cat $SYNC_PROGRESS_DIR/rsync_progress.$LVM_IMAGE_NAME.log | wc -l`
				    if [ "$PARTITIAL_CHANGE_SIZE" == 0 ]; then
					    PARTITIAL_CHANGE_SIZE=1
				    fi
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( COMPLETE_CHANGE_SIZE / PARTITIAL_CHANGE_SIZE ))
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( 100 / CURRENT_SYNC_PROGRESS_IN_PERCENT ))
				    # make sure to not send 100%, this is send by clone finished
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( CURRENT_SYNC_PROGRESS_IN_PERCENT - 1 ))
					if (( $CURRENT_SYNC_PROGRESS_IN_PERCENT < 0 )); then
						CURRENT_SYNC_PROGRESS_IN_PERCENT=0
					fi
				    echo "$CURRENT_SYNC_PROGRESS_IN_PERCENT" > $STORAGE_STATUS_TMP
				    if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=get_sync_progress; then
					    openvz_log "post_sync_progress" "Could not post the sync progress for volume $LVM_IMAGE_NAME to openQRM at $OPENQRM_SERVER_IP."
				    fi
				    rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
				fi
			fi
			sleep 2
		done
		;;


	post_sync_finished)
		echo "Posting finished for volume $LVM_IMAGE_NAME to the openQRM-server"
		STORAGE_STATUS_TMP=$resource_id.lvm.$LVM_IMAGE_NAME.sync_progress
		echo "100" > $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$LVM_OPENQRM_USERNAME --http-password=$LVM_OPENQRM_PASSWORD  --post-file=`$OPENQRM_POSTENCODE $STORAGE_STATUS_TMP` $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/base/plugins/openvz-storage/openvz-storage-action.php?lvm_storage_command=get_sync_finished; then
			openvz_log "post_sync_finished" "Could not post the sync progress for volume $LVM_IMAGE_NAME to openQRM at $OPENQRM_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;



############### openvz template functions #############################################

	get_openvz_templates)
		# this function runs only on the openQRM server, no post via wget needed
		echo "Posting the list of openvz templates" | logger
		STORAGE_STATUS="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/openvz-storage/web/storage/openvz-templates.stat"
		STORAGE_STATUS_TMP="$OPENQRM_SERVER_BASE_DIR/openqrm/plugins/openvz-storage/web/storage/openvz-templates.stat.tmp"
		> $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS
		if [ ! -f $OPENVZ_TEMPLATE_DIR ]; then
			mkdir -p $OPENVZ_TEMPLATE_DIR
		fi
		for OPENVZ in `ls $OPENVZ_TEMPLATE_DIR/* 2>/dev/null`; do
			OPENVZ_NAME=`basename $OPENVZ`
			OPENVZ_SIZE=`du -sh $OPENVZ | awk {' print $1 '}`
			echo "$OPENVZ_NAME""@""$OPENVZ_SIZE""@" >> $STORAGE_STATUS_TMP
		done
		chmod 777 $STORAGE_STATUS_TMP
		mv -f $STORAGE_STATUS_TMP $STORAGE_STATUS
		;;

	remove_openvz_template)
		# this function runs only on the openQRM server
		if [ -f "$OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME" ]; then
			rm -f $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME
			openqrm_post_event 0 "remove_openvz_template" 5 "openqrm-openvz-storage" "Removed openvz-template $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME"
		fi
		$0 get_openvz_templates
		;;


	download_openvz_template)
		# this function runs only on the openQRM server, no post via wget needed
		echo "Downloading openvz templates" | logger
		if [ "$OPENVZ_TEMPLATE_URL" == "" ]; then
			#echo "ERROR: openvz-template url parameter empty" | logger
			exit 1
		fi
		if [ ! -d $OPENVZ_TEMPLATE_TEMP_DIR ]; then
			mkdir -p $OPENVZ_TEMPLATE_TEMP_DIR
		fi
		OPENVZ_TEMPLATE_NAME=`basename $OPENVZ_TEMPLATE_URL`
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 9 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME"
		if ! wget --no-check-certificate -O $OPENVZ_TEMPLATE_TEMP_DIR/$OPENVZ_TEMPLATE_NAME $OPENVZ_TEMPLATE_URL; then
			openqrm_post_event 0 "download_openvz_template" 2 "openqrm-openvz-storage" "Could not download openvz-template $OPENVZ_TEMPLATE_NAME from $OPENVZ_TEMPLATE_URL!"
			openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME"
			openvz_lock release
			exit 1
		fi
		mv $OPENVZ_TEMPLATE_TEMP_DIR/$OPENVZ_TEMPLATE_NAME $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME"
		;;


	deploy_openvz_template)
		# this function runs only on the openvz host !
		if [ "$OPENVZ_TEMPLATE_NAME" == "" ]; then
			#echo "ERROR: openvz-template parameter empty" | logger
			exit 1
		fi
		openvz_lock aquire
		if [ ! -d $OPENVZ_TEMPLATE_DIR ]; then
			mkdir -p $OPENVZ_TEMPLATE_DIR
		fi
		if [ -f $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME ]; then
			rm -f $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME
		fi
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 9 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME from openQRM Server"
		if ! wget -q $WGET_NO_CERT_CHECK -O $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME $openqrm_web_protocol://$OPENQRM_SERVER_IP/openqrm/boot-service/openvz-templates/$OPENVZ_TEMPLATE_NAME; then
			openqrm_post_event 0 "deploy_openvz_template" 2 "openqrm-openvz-storage" "Could not download openvz-template $OPENVZ_TEMPLATE_NAME from openQRM-server at $OPENQRM_SERVER_IP!"
			openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME from openQRM Server"
			openvz_lock release
			exit 1
		fi
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started to download $OPENVZ_TEMPLATE_NAME from openQRM Server"
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 9 "openvz-storage" "Started deployment of $OPENVZ_TEMPLATE_NAME to $LVM_IMAGE_NAME"
		# rescan lvols
		lvscan
		# activate
		lvchange -ay /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		# mount device in temporary dir
		MOUNTPOINT=`mktemp -d $OPENVZ_TEMPLATE_TEMP_DIR/$LVM_IMAGE_NAME.XXXXXXXXXX` || exit 1
		if ! mount /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME $MOUNTPOINT; then
			openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started deployment of $OPENVZ_TEMPLATE_NAME to $LVM_IMAGE_NAME"
			openqrm_post_event 0 "deploy_openvz_template" 2 "openqrm-openvz-storage" "Could not mount /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME at $MOUNTPOINT!"
			#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
			openvz_lock release
			exit 1
		fi
		if ! tar -C $MOUNTPOINT -xzf $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME; then
			openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started deployment of $OPENVZ_TEMPLATE_NAME to $LVM_IMAGE_NAME"
			openqrm_post_event 0 "deploy_openvz_template" 2 "openqrm-openvz-storage" "Could not unpack $OPENVZ_TEMPLATE_DIR/$OPENVZ_TEMPLATE_NAME!"
			umount $MOUNTPOINT
			rmdir $MOUNTPOINT
			#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
			openvz_lock release
			exit 1
		fi
		# remove downloaded template + cleanup
		umount $MOUNTPOINT
		rmdir $MOUNTPOINT
		#lvchange -an /dev/$LVM_STORAGE_SERVER_VOLUME_GROUP/$LVM_IMAGE_NAME
		openqrm_post_event 0 "$OPENVZ_TEMPLATE_NAME" 10 "openvz-storage" "Started deployment of $OPENVZ_TEMPLATE_NAME to $LVM_IMAGE_NAME"
		openqrm_post_event 0 "deploy_openvz_template" 5 "openqrm-openvz-storage" "Deployment of $OPENVZ_TEMPLATE_NAME to $LVM_IMAGE_NAME finished successfully"
		openvz_lock release
		;;


	*)
		openvz_storage_usage
		;;


esac

