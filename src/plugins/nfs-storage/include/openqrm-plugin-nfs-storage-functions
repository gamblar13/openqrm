#!/bin/bash
# this is the functions file for the nfs-storage-plugin
#
# openQRM Enterprise developed by openQRM Enterprise GmbH.
#
# All source code and content (c) Copyright 2012, openQRM Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the GNU General Public License version 2, unless otherwise agreed with openQRM Enterprise GmbH.
# The latest version of this license can be found here: src/doc/LICENSE.txt
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://openqrm-enterprise.com
#
# Copyright 2012, openQRM Enterprise GmbH <info@openqrm-enterprise.com>
#

# some definitions
DEFAULT_IMAGE_SIZE=5000
NFS_MGMT_LOCK_FILE=/var/run/nfs-storage/nfs-storage-plugin.lock
NFS_MGMT_LOCK_DELAY=5
NFS_MGMT_LOCK_RETRY=100
NFS_MGMT_LOCK_TIMEOUT=500
NFS_STORAGE_SERVER_IMAGE_DIRECTORY="/exports"
NFSEXPORTS="/etc/exports"

################ common nfs-storage functions

# logs for nfs_storage
function nfs_storage_log() {
	local COMPONENT=$1
	shift
	local MESSAGE=$@
	logger -i -t "nfs-storage plug-in" "$COMPONENT : $MESSAGE"
}


# locking function
function nfs_storage_lock() {
	local COMMAND=$1
	local RET=1

	if [ ! -d `dirname $NFS_MGMT_LOCK_FILE` ]; then
		mkdir -p `dirname $NFS_MGMT_LOCK_FILE`
	fi
	case "$COMMAND" in
		aquire)
				lockfile -s $NFS_MGMT_LOCK_DELAY -r $NFS_MGMT_LOCK_RETRY -l $NFS_MGMT_LOCK_TIMEOUT $NFS_MGMT_LOCK_FILE
				RET=$?
				nfs_storage_log nfs_storage_lock "Aquired the lock"
				return $RET
				;;
		release)
				/bin/rm -f $NFS_MGMT_LOCK_FILE
				RET=$?
				nfs_storage_log nfs_storage_lock "Released the lock"
				return $RET
				;;
		*)
			nfs_storage_log nfs_storage_lock "No such command. Try 'aquire' or 'release'"
			return 1
			;;
	esac
}



################ nfs-storage functions


function manage_nfs() {
	case "$1" in
		add)
			OPENQRM_SERVER=$2
			mkdir -p $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME
			echo "$NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME	$OPENQRM_SERVER(rw,insecure,no_root_squash,async)" >> $NFSEXPORTS
			sed -i '/^$/d' $NFSEXPORTS
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			elif [ -x /etc/init.d/nfsserver ]; then
				/etc/init.d/nfsserver reload
			else
				openqrm_post_event 0 "add" 3 "nfs-storage" "Could not find nfs-server init script!"
			fi
			;;
		remove)
			# tabs and spaces
			sed -i -e "s#^$NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME .*##g" $NFSEXPORTS
			sed -i -e "s#^$NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME	.*##g" $NFSEXPORTS
			sed -i '/^$/d' $NFSEXPORTS
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			elif [ -x /etc/init.d/nfsserver ]; then
				/etc/init.d/nfsserver reload
			else
				openqrm_post_event 0 "remove" 3 "nfs-storage" "Could not find nfs-server init script!"
			fi
			rm -rf $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/*
			rmdir $NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME
			;;

		auth)
			AUTH_IP=$2
			# tabs and spaces
			sed -i -e "s#^$NFS_IMAGE_ROOTDEVICE .*#$NFS_IMAGE_ROOTDEVICE	$AUTH_IP(rw,insecure,no_root_squash,async)#g" $NFSEXPORTS
			sed -i -e "s#^$NFS_IMAGE_ROOTDEVICE	.*#$NFS_IMAGE_ROOTDEVICE	$AUTH_IP(rw,insecure,no_root_squash,async)#g" $NFSEXPORTS
			sed -i '/^$/d' $NFSEXPORTS
			if [ -x /etc/init.d/nfs ]; then
				/etc/init.d/nfs reload
			elif [ -x /etc/init.d/nfs-kernel-server ]; then
				/etc/init.d/nfs-kernel-server reload
			elif [ -x /etc/init.d/nfsserver ]; then
				/etc/init.d/nfsserver reload
			else
				openqrm_post_event 0 "auth" 3 "nfs-storage" "Could not find nfs-server init script!"
			fi
			;;

	esac
}



