#!/bin/bash
# openQRM mysql-specfic functions
#
# This file is part of openQRM.
#
# openQRM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# openQRM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with openQRM.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2009, Matthias Rechenburg <matt@openqrm.com>
#

if [ "$OPENQRM_SERVER_BASE_DIR" == "" ]; then
	echo "ERROR: Please export OPENQRM_SERVER_BASE_DIR before sourcing $0"
	exit 1
fi

. $OPENQRM_SERVER_BASE_DIR/openqrm/etc/openqrm-server.conf
. $OPENQRM_SERVER_BASE_DIR/openqrm/include/openqrm-server-functions
# get full server config
openqrm_server_get_config
OPENQRM_DATABASE_INIT="$OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/mysql/openqrm-mysql-init.sql"

OPENQRM_DATABASE_MAINTENANCE="$OPENQRM_SERVER_BASE_DIR/openqrm/etc/db/mysql/openqrm-mysql-maintenance"
OPENQRM_DATABASE_MAINTENANCE_FNAME=`basename $OPENQRM_DATABASE_MAINTENANCE`

if ! which mysql 1>/dev/null 2>&1; then
	echo "ERROR: Mysql client 'mysql' not installed/found on this system"
	exit 1
else
	export MYSQL_CLIENT=`which mysql`
fi
if ! which mysqldump 1>/dev/null 2>&1; then
	echo "ERROR: Mysql 'mysqldump' not installed/found on this system"
	exit 1
else
	export MYSQL_DUMP=`which mysqldump`
fi



function initialize_database() {
	# set the dbname in the sql init-script
	OPENQRM_DATABASE_INIT_TMP=/tmp/openqrm-mysql-init.sql
	cat $OPENQRM_DATABASE_INIT |	\
		sed -e "s/OPENQRM_DB/$OPENQRM_DATABASE_NAME/g" |	\
		sed -e "s/OPENQRM_SERVER_IP_ADDRESS/$OPENQRM_SERVER_IP_ADDRESS/g"	\
		> $OPENQRM_DATABASE_INIT_TMP

	echo "Initializing the openQRM-database"
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER -e "drop database $OPENQRM_DATABASE_NAME" 1>/dev/null 2>&1
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER < $OPENQRM_DATABASE_INIT_TMP
		RET=$?
	else
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER -e "drop database $OPENQRM_DATABASE_NAME" 1>/dev/null 2>&1
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER < $OPENQRM_DATABASE_INIT_TMP
		RET=$?
	fi
	rm -f $OPENQRM_DATABASE_INIT_TMP

	# add the db maintenance to cron
	cat $OPENQRM_DATABASE_MAINTENANCE | sed -e "s#@@OPENQRM_SERVER_BASE_DIR@@#$OPENQRM_SERVER_BASE_DIR#g" > /etc/cron.daily/$OPENQRM_DATABASE_MAINTENANCE_FNAME
	chmod +x /etc/cron.daily/$OPENQRM_DATABASE_MAINTENANCE_FNAME
    if [ -x "/etc/init.d/cron" ]; then
        if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
            invoke-rc.d cron reload || exit $?
        else
            /etc/init.d/cron reload || exit $?
        fi
	elif [ -x "/etc/init.d/crond" ]; then
        if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
            invoke-rc.d crond reload || exit $?
        else
            /etc/init.d/crond reload || exit $?
        fi
    else
    	echo "Could not find cron init script in /etc/init.d/. Please reload cron manually!"
    fi
	return $RET
}

function backup_database() {
	local SQL=$1
	echo "Creating backup of the openQRM-database at $SQL"
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
		$MYSQL_DUMP -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER $OPENQRM_DATABASE_NAME > $SQL
		RET=$?
	else
		$MYSQL_DUMP -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME > $SQL
		RET=$?
	fi
	return $RET

}

function restore_database() {
	local SQL=$1
	echo "Restoring the openQRM-database from $SQL"
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER $OPENQRM_DATABASE_NAME < $SQL
		RET=$?
	else
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER $OPENQRM_DATABASE_NAME < $SQL
		RET=$?
	fi
	return $RET

}

function drop_database() {
	echo "Dropping the openQRM-database"
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER -e "drop database $OPENQRM_DATABASE_NAME" 1>/dev/null 2>&1
		RET=$?
	else
		$MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER -e "drop database $OPENQRM_DATABASE_NAME" 1>/dev/null 2>&1
		RET=$?
	fi

	# remove maintenance cron job
	rm -f /etc/cron.daily/$OPENQRM_DATABASE_MAINTENANCE_FNAME
    if [ -x "/etc/init.d/cron" ]; then
        if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
            invoke-rc.d cron reload || exit $?
        else
            /etc/init.d/cron reload || exit $?
        fi
	elif [ -x "/etc/init.d/crond" ]; then
        if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
            invoke-rc.d crond reload || exit $?
        else
            /etc/init.d/crond reload || exit $?
        fi
    else
    	echo "Could not find cron init script in /etc/init.d/. Please reload cron manually!"
    fi

	return $RET
}



########################### functions to update the db shema ###########################

function check_table_exists(){
    local DB_TABLE=$1
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select * from $DB_TABLE" 1>/dev/null 2>&1
		RET=$?
	else
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select * from $DB_TABLE" 1>/dev/null 2>&1
		RET=$?
	fi
    return $RET
}


function check_column_in_table_exists(){
    local DB_TABLE=$1
    local DB_COLUMN=$2
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select $DB_COLUMN from $DB_TABLE" 1>/dev/null 2>&1
		RET=$?
	else
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select $DB_COLUMN from $DB_TABLE" 1>/dev/null 2>&1
		RET=$?
	fi
    return $RET
}


function check_if_data_in_column_of_table_exists(){
    local DB_TABLE=$1
    local DB_COLUMN=$2
    local DB_DATA=$3
    local DB_OUTPUT_LOG="/tmp/dboutput.log"
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select * from $DB_TABLE where $DB_COLUMN=$DB_DATA" > $DB_OUTPUT_LOG
		RET=$?
	else
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "select * from $DB_TABLE where $DB_COLUMN=$DB_DATA" > $DB_OUTPUT_LOG
		RET=$?
	fi
    DB_OUTPUT=`cat $DB_OUTPUT_LOG`
    if [ "$RET" == 0 ]; then
        if [ "$DB_OUTPUT" == "" ]; then
            return 1
        else
            return 0
        fi
    else
        return $RET
    fi
}



function run_sql(){
    local DB_SQL=$@
	if [ -z "$OPENQRM_DATABASE_PASSWORD" ]; then
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "$DB_SQL" 1>/dev/null 2>&1
		RET=$?
	else
        $MYSQL_CLIENT -u $OPENQRM_DATABASE_USER -p$OPENQRM_DATABASE_PASSWORD --host $OPENQRM_DATABASE_SERVER  $OPENQRM_DATABASE_NAME -e "$DB_SQL" 1>/dev/null 2>&1
		RET=$?
	fi
    return $RET
}




function db_update()  {

    # this function applies needed updates to the db-shema if needed in an idempotent way

    # from 4.6 to 4.7 the following db changes are needed
    # 1  > ALTER TABLE cloud_users ADD cu_cg_id int(5);
    # 2  > create table cloud_usergroups(cg_id INT(5), cg_name VARCHAR(50), cg_role_id INT(5), cg_description VARCHAR(255));
    # 3  > insert into cloud_config(cc_id, cc_key, cc_value) values (25, 'resource_pooling', 'true');
    # 4  > insert into cloud_config(cc_id, cc_key, cc_value) values (26, 'ip-management', 'true');
    # 5  > update cloud_users set cu_cg_id=0;
    # 6  > insert into `cloud_usergroups` VALUES (0,'Default',0,'The default CloudUser Group');
    # 7  > create table cloud_respool(rp_id INT(5), rp_resource_id INT(5), rp_cg_id INT(5));
    # 8  > create table cloud_hostlimit(hl_id INT(5), hl_resource_id INT(5), hl_current_vms INT(5), hl_max_vms INT(5));
    # 9  > create table cloud_power_saver(ps_id INT(5), ps_frequence VARCHAR(50), ps_last_check VARCHAR(50));
    # 10 > insert into `cloud_power_saver` VALUES (0,'1800','');
    # 11 > ALTER TABLE cloud_requests ADD cr_ip_mgmt VARCHAR(255);
    # 12 > create table cloud_profiles(pr_id INT(5), pr_request_time VARCHAR(20), pr_cu_id INT(5), pr_status INT(5), pr_request_time VARCHAR(20), pr_start VARCHAR(20), pr_stop VARCHAR(20), pr_kernel_id INT(5), pr_image_id INT(5), pr_ram_req VARCHAR(20), pr_cpu_req VARCHAR(20), pr_disk_req VARCHAR(20), pr_network_req VARCHAR(255), pr_resource_quantity INT(5), pr_resource_type_req VARCHAR(20), pr_deployment_type_req VARCHAR(50), pr_ha_req VARCHAR(5), pr_shared_req VARCHAR(5), pr_appliance_id VARCHAR(255), pr_puppet_groups VARCHAR(255), pr_ip_mgmt VARCHAR(255), pr_lastbill VARCHAR(20), pr_description VARCHAR(255));
    # 13 > create table cloud_icons(ic_id INT(5), ic_cu_id INT(5), ic_type INT(5), ic_object_id INT(5), ic_filename VARCHAR(255));
    # 14 > create table cloud_matrix(cm_id INT(5), cm_cu_id INT(5), cm_description VARCHAR(255), cm_row01 VARCHAR(255), cm_row02 VARCHAR(255), cm_row03 VARCHAR(255), cm_row04 VARCHAR(255), cm_row05 VARCHAR(255), cm_row06 VARCHAR(255), cm_row07 VARCHAR(255), cm_row08 VARCHAR(255), cm_row09 VARCHAR(255), cm_row10 VARCHAR(255), cm_row11 VARCHAR(255), cm_row12 VARCHAR(255));
    # 15 > create table cloud_matrix_object(mo_id INT(5), mo_pr_id INT(5), mo_cr_id INT(5), mo_ca_id INT(5), mo_ne_id INT(5), mo_table INT(5), mo_x INT(5), mo_y INT(5), mo_state INT(5));
    # 16 > create table cloud_create_vm_lc(vc_id INT(5), vc_resource_id INT(5), vc_cr_id INT(5), vc_cr_resource_number INT(5), vc_request_time VARCHAR(20), vc_vm_create_timeout INT(5), vc_state INT(5));
    # 17 > create table auth_blocker_info(ab_id INT(5) NOT NULL PRIMARY KEY, ab_image_id INT(5), ab_image_name VARCHAR(50),	ab_start_time VARCHAR(20));
    # 18 > insert into cloud_config(cc_id, cc_key, cc_value) values (27, 'max-parallel-phase-one-actions', '0');
    # 19 > insert into cloud_config(cc_id, cc_key, cc_value) values (28, 'max-parallel-phase-two-actions', '3');
    # 20 > insert into cloud_config(cc_id, cc_key, cc_value) values (29, 'max-parallel-phase-three-actions', '0');
    # 21 > insert into cloud_config(cc_id, cc_key, cc_value) values (30, 'max-parallel-phase-four-actions', '0');
    # 22 > insert into cloud_config(cc_id, cc_key, cc_value) values (31, 'max-parallel-phase-five-actions', '0');
    # 23 > insert into cloud_config(cc_id, cc_key, cc_value) values (32, 'max-parallel-phase-six-actions', '0');
    # 24 > insert into cloud_config(cc_id, cc_key, cc_value) values (33, 'max-parallel-phase-seven-actions', '0');
    # 25 > ALTER TABLE event_info MODIFY event_description VARCHAR(255);


    #---------------------------------------------------------------------------
    # from 4.7 to 4.8 the following db changes are needed
    #---------------------------------------------------------------------------
    # from 4.8 to 4.9 the following db changes are needed
    #---------------------------------------------------------------------------
    # from 4.9 to 5.0 the following db changes are needed
    #---------------------------------------------------------------------------

    echo "- Checking database shema ..."
    echo " - version 4.6 to 4.7"
    # from 4.6 to 4.7 we only have updates in the cloud tables
    # so we check first if the cloud plugin is enabled before appling any changes
    # if cloud enabled .....
    if [ -e "$OPENQRM_WEBSERVER_DOCUMENT_ROOT/openqrm/base/plugins/cloud" ]; then

        # 1  > ALTER TABLE cloud_users ADD cu_cg_id int(5);
        if check_table_exists cloud_users; then
            if ! check_column_in_table_exists cloud_users cu_cg_id; then
                echo " -- db change : ALTER TABLE cloud_users ADD cu_cg_id int(5);"
                run_sql "ALTER TABLE cloud_users ADD cu_cg_id int(5);"
        # 5  > update cloud_users set cu_cg_id=0;
                echo " -- db change : update cloud_users set cu_cg_id=0;"
                run_sql "update cloud_users set cu_cg_id=0;"
            fi
        fi
        # 2  > create table cloud_usergroups(cg_id INT(5), cg_name VARCHAR(50), cg_role_id INT(5), cg_description VARCHAR(255));
        if ! check_table_exists cloud_usergroups; then
            echo " -- db change : create table cloud_usergroups(cg_id INT(5), cg_name VARCHAR(50), cg_role_id INT(5), cg_description VARCHAR(255));"
            run_sql "create table cloud_usergroups(cg_id INT(5), cg_name VARCHAR(50), cg_role_id INT(5), cg_description VARCHAR(255));"
        # 6  > insert into `cloud_usergroups` VALUES (0,'Default',0,'The default CloudUser Group');
            echo " -- db change : insert into cloud_usergroups VALUES (0,'Default',0,'The default CloudUser Group');"
            run_sql "insert into cloud_usergroups VALUES (0,'Default',0,'The default CloudUser Group');"
        fi
        # 3  > insert into cloud_config(cc_id, cc_key, cc_value) values (25, 'resource_pooling', 'true');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 25; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (25, 'resource_pooling', 'true');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (25, 'resource_pooling', 'true');"
            fi
        fi
        # 4  > insert into cloud_config(cc_id, cc_key, cc_value) values (26, 'ip-management', 'true');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 26; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (26, 'ip-management', 'true');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (26, 'ip-management', 'true');"
            fi
        fi
        # 18 > insert into cloud_config(cc_id, cc_key, cc_value) values (27, 'max-parallel-phase-one-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 27; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (27, 'max-parallel-phase-one-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (27, 'max-parallel-phase-one-actions', '0');"
            fi
        fi
        # 19 > insert into cloud_config(cc_id, cc_key, cc_value) values (28, 'max-parallel-phase-two-actions', '3');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 28; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (28, 'max-parallel-phase-two-actions', '3');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (28, 'max-parallel-phase-two-actions', '3');"
            fi
        fi
        # 20 > insert into cloud_config(cc_id, cc_key, cc_value) values (29, 'max-parallel-phase-three-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 29; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (29, 'max-parallel-phase-three-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (29, 'max-parallel-phase-three-actions', '0');"
            fi
        fi
        # 21 > insert into cloud_config(cc_id, cc_key, cc_value) values (30, 'max-parallel-phase-four-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 30; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (30, 'max-parallel-phase-four-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (30, 'max-parallel-phase-four-actions', '0');"
            fi
        fi
        # 22 > insert into cloud_config(cc_id, cc_key, cc_value) values (31, 'max-parallel-phase-five-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 31; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (31, 'max-parallel-phase-five-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (31, 'max-parallel-phase-five-actions', '0');"
            fi
        fi
        # 23 > insert into cloud_config(cc_id, cc_key, cc_value) values (32, 'max-parallel-phase-six-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 32; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (32, 'max-parallel-phase-six-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (32, 'max-parallel-phase-six-actions', '0');"
            fi
        fi
        # 24 > insert into cloud_config(cc_id, cc_key, cc_value) values (33, 'max-parallel-phase-seven-actions', '0');
        if check_table_exists cloud_config; then
            if ! check_if_data_in_column_of_table_exists cloud_config cc_id 33; then
                echo " -- db change : insert into cloud_config(cc_id, cc_key, cc_value) values (33, 'max-parallel-phase-seven-actions', '0');"
                run_sql "insert into cloud_config(cc_id, cc_key, cc_value) values (33, 'max-parallel-phase-seven-actions', '0');"
            fi
        fi
        # 5 see 1
        # 6 see 2
        # 7  > create table cloud_respool(rp_id INT(5), rp_resource_id INT(5), rp_cg_id INT(5));
        if ! check_table_exists cloud_respool; then
            echo " -- db change : create table cloud_respool(rp_id INT(5), rp_resource_id INT(5), rp_cg_id INT(5));"
            run_sql "create table cloud_respool(rp_id INT(5), rp_resource_id INT(5), rp_cg_id INT(5));"
        fi
        # 8  > create table cloud_hostlimit(hl_id INT(5), hl_resource_id INT(5), hl_current_vms INT(5), hl_max_vms INT(5));
        if ! check_table_exists cloud_hostlimit; then
            echo " -- db change : create table cloud_hostlimit(hl_id INT(5), hl_resource_id INT(5), hl_current_vms INT(5), hl_max_vms INT(5));"
            run_sql "create table cloud_hostlimit(hl_id INT(5), hl_resource_id INT(5), hl_current_vms INT(5), hl_max_vms INT(5));"
        fi
        # 9  > create table cloud_power_saver(ps_id INT(5), ps_frequence VARCHAR(50), ps_last_check VARCHAR(50));
        if ! check_table_exists cloud_power_saver; then
            echo " -- db change : create table cloud_power_saver(ps_id INT(5), ps_frequence VARCHAR(50), ps_last_check VARCHAR(50));"
            run_sql "create table cloud_power_saver(ps_id INT(5), ps_frequence VARCHAR(50), ps_last_check VARCHAR(50));"
        # 10 > insert into cloud_power_saver VALUES (0,'1800','');
            echo " -- db change : insert into cloud_power_saver VALUES (0,'1800','');"
            run_sql "insert into cloud_power_saver VALUES (0,'1800','');"
        fi
    fi
    # 11 > ALTER TABLE cloud_requests ADD cr_ip_mgmt VARCHAR(255);
    if check_table_exists cloud_requests; then
        if ! check_column_in_table_exists cloud_requests cr_ip_mgmt; then
            echo " -- db change : ALTER TABLE cloud_requests ADD cr_ip_mgmt VARCHAR(255);"
            run_sql "ALTER TABLE cloud_requests ADD cr_ip_mgmt VARCHAR(255);"
        fi
    fi
    # 12 > create table cloud_profiles(pr_id INT(5), pr_name VARCHAR(20), pr_cu_id INT(5), pr_status INT(5), pr_request_time VARCHAR(20), pr_start VARCHAR(20), pr_stop VARCHAR(20), pr_kernel_id INT(5), pr_image_id INT(5), pr_ram_req VARCHAR(20), pr_cpu_req VARCHAR(20), pr_disk_req VARCHAR(20), pr_network_req VARCHAR(255), pr_resource_quantity INT(5), pr_resource_type_req VARCHAR(20), pr_deployment_type_req VARCHAR(50), pr_ha_req VARCHAR(5), pr_shared_req VARCHAR(5), pr_appliance_id VARCHAR(255), pr_puppet_groups VARCHAR(255), pr_ip_mgmt VARCHAR(255), pr_lastbill VARCHAR(20), pr_description VARCHAR(255));
    if ! check_table_exists cloud_profiles; then
        echo " -- db change : create table cloud_profiles(pr_id INT(5), pr_name VARCHAR(20), pr_cu_id INT(5), pr_status INT(5), pr_request_time VARCHAR(20), pr_start VARCHAR(20), pr_stop VARCHAR(20), pr_kernel_id INT(5), pr_image_id INT(5), pr_ram_req VARCHAR(20), pr_cpu_req VARCHAR(20), pr_disk_req VARCHAR(20), pr_network_req VARCHAR(255), pr_resource_quantity INT(5), pr_resource_type_req VARCHAR(20), pr_deployment_type_req VARCHAR(50), pr_ha_req VARCHAR(5), pr_shared_req VARCHAR(5), pr_appliance_id VARCHAR(255), pr_puppet_groups VARCHAR(255), pr_ip_mgmt VARCHAR(255), pr_lastbill VARCHAR(20), pr_description VARCHAR(255));"
        run_sql "create table cloud_profiles(pr_id INT(5), pr_name VARCHAR(20), pr_cu_id INT(5), pr_status INT(5), pr_request_time VARCHAR(20), pr_start VARCHAR(20), pr_stop VARCHAR(20), pr_kernel_id INT(5), pr_image_id INT(5), pr_ram_req VARCHAR(20), pr_cpu_req VARCHAR(20), pr_disk_req VARCHAR(20), pr_network_req VARCHAR(255), pr_resource_quantity INT(5), pr_resource_type_req VARCHAR(20), pr_deployment_type_req VARCHAR(50), pr_ha_req VARCHAR(5), pr_shared_req VARCHAR(5), pr_appliance_id VARCHAR(255), pr_puppet_groups VARCHAR(255), pr_ip_mgmt VARCHAR(255), pr_lastbill VARCHAR(20), pr_description VARCHAR(255));"
    fi
    # 13 > create table cloud_icons(ic_id INT(5), ic_cu_id INT(5), ic_type INT(5), ic_object_id INT(5), ic_filename VARCHAR(255));
    if ! check_table_exists cloud_icons; then
        echo " -- db change : create table cloud_icons(ic_id INT(5), ic_cu_id INT(5), ic_type INT(5), ic_object_id INT(5), ic_filename VARCHAR(255));"
        run_sql "create table cloud_icons(ic_id INT(5), ic_cu_id INT(5), ic_type INT(5), ic_object_id INT(5), ic_filename VARCHAR(255));"
    fi
    # 14 > create table cloud_matrix(cm_id INT(5), cm_cu_id INT(5), cm_description VARCHAR(255), cm_row01 VARCHAR(255), cm_row02 VARCHAR(255), cm_row03 VARCHAR(255), cm_row04 VARCHAR(255), cm_row05 VARCHAR(255), cm_row06 VARCHAR(255), cm_row07 VARCHAR(255), cm_row08 VARCHAR(255), cm_row09 VARCHAR(255), cm_row10 VARCHAR(255), cm_row11 VARCHAR(255), cm_row12 VARCHAR(255));
    if ! check_table_exists cloud_matrix; then
        echo " -- db change : create table cloud_matrix(cm_id INT(5), cm_cu_id INT(5), cm_description VARCHAR(255), cm_row01 VARCHAR(255), cm_row02 VARCHAR(255), cm_row03 VARCHAR(255), cm_row04 VARCHAR(255), cm_row05 VARCHAR(255), cm_row06 VARCHAR(255), cm_row07 VARCHAR(255), cm_row08 VARCHAR(255), cm_row09 VARCHAR(255), cm_row10 VARCHAR(255), cm_row11 VARCHAR(255), cm_row12 VARCHAR(255));"
        run_sql "create table cloud_matrix(cm_id INT(5), cm_cu_id INT(5), cm_description VARCHAR(255), cm_row01 VARCHAR(255), cm_row02 VARCHAR(255), cm_row03 VARCHAR(255), cm_row04 VARCHAR(255), cm_row05 VARCHAR(255), cm_row06 VARCHAR(255), cm_row07 VARCHAR(255), cm_row08 VARCHAR(255), cm_row09 VARCHAR(255), cm_row10 VARCHAR(255), cm_row11 VARCHAR(255), cm_row12 VARCHAR(255));"
    fi
    # 15 > create table cloud_matrix_object(mo_id INT(5), mo_pr_id INT(5), mo_cr_id INT(5), mo_ca_id INT(5), mo_ne_id INT(5), mo_table INT(5), mo_x INT(5), mo_y INT(5), mo_state INT(5));
    if ! check_table_exists cloud_matrix_object; then
        echo " -- db change : create table cloud_matrix_object(mo_id INT(5), mo_pr_id INT(5), mo_cr_id INT(5), mo_ca_id INT(5), mo_ne_id INT(5), mo_table INT(5), mo_x INT(5), mo_y INT(5), mo_state INT(5));"
        run_sql "create table cloud_matrix_object(mo_id INT(5), mo_pr_id INT(5), mo_cr_id INT(5), mo_ca_id INT(5), mo_ne_id INT(5), mo_table INT(5), mo_x INT(5), mo_y INT(5), mo_state INT(5));"
    fi
    # 16 > create table cloud_create_vm_lc(vc_id INT(5), vc_resource_id INT(5), vc_cr_id INT(5), vc_cr_resource_number INT(5), vc_request_time VARCHAR(20), vc_vm_create_timeout INT(5), vc_state INT(5));
    if ! check_table_exists cloud_create_vm_lc; then
        echo " -- db change : create table cloud_create_vm_lc(vc_id INT(5), vc_resource_id INT(5), vc_cr_id INT(5), vc_cr_resource_number INT(5), vc_request_time VARCHAR(20), vc_vm_create_timeout INT(5), vc_state INT(5));"
        run_sql "create table cloud_create_vm_lc(vc_id INT(5), vc_resource_id INT(5), vc_cr_id INT(5), vc_cr_resource_number INT(5), vc_request_time VARCHAR(20), vc_vm_create_timeout INT(5), vc_state INT(5));"
    fi
    # 17 > create table auth_blocker_info(ab_id INT(5) NOT NULL PRIMARY KEY, ab_image_id INT(5), ab_image_name VARCHAR(50), ab_start_time VARCHAR(20));
    if ! check_table_exists auth_blocker_info; then
        echo " -- db change : create table auth_blocker_info(ab_id INT(5) NOT NULL PRIMARY KEY, ab_image_id INT(5), ab_image_name VARCHAR(50), ab_start_time VARCHAR(20));"
        run_sql "create table auth_blocker_info(ab_id INT(5) NOT NULL PRIMARY KEY, ab_image_id INT(5), ab_image_name VARCHAR(50), ab_start_time VARCHAR(20));"
    fi
    # 18 - 24 see cloud sections
    # 25 > ALTER TABLE event_info MODIFY event_description VARCHAR(255);
    echo " -- db change : ALTER TABLE event_info MODIFY event_description VARCHAR(255);"
    run_sql "ALTER TABLE event_info MODIFY event_description VARCHAR(255);"


    echo "- Database sanity check for version 4.6 to 4.7 finished"


}







case "$1" in
	init)
		initialize_database
		;;
	backup)
		backup_database $2
		;;
	restore)
		restore_database $2
		;;
	drop)
		drop_database
		;;
	update)
		db_update
		;;
esac
